#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels 
#define SCREEN_HEIGHT_S 32 // OLED display height, in pixels 
#define SCREEN_HEIGHT_L 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin) 

Adafruit_SSD1306 Display1(SCREEN_WIDTH, SCREEN_HEIGHT_L, &Wire, OLED_RESET);
Adafruit_SSD1306 Display2(SCREEN_WIDTH, SCREEN_HEIGHT_S, &Wire, OLED_RESET);

// constants won't change. They're used here to set pin numbers:
const int buttonPin = 3;     // the number of the pushbutton pin
const int ledPin =  5;      // the number of the LED pin

// 'TitleBackground', 128x64px
const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x61, 0x80, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x01, 0x80, 0x66, 0xf0, 0x70, 0x6e, 0x00, 0xc0, 0x1c, 0x30, 0xc6, 0xcf, 0x0e, 0x00, 0x1f, 
  0xf0, 0x01, 0x80, 0x67, 0x19, 0x8c, 0x73, 0x00, 0x70, 0x63, 0x30, 0xc7, 0x30, 0x31, 0x80, 0x1f, 
  0xf0, 0x01, 0x80, 0x66, 0x0d, 0x04, 0x61, 0x80, 0x38, 0x41, 0x30, 0xc6, 0x20, 0x20, 0x80, 0x1f, 
  0xf0, 0x01, 0x80, 0x66, 0x0f, 0x06, 0x61, 0x80, 0x0c, 0xc1, 0xb0, 0xc6, 0x60, 0x60, 0xc0, 0x1f, 
  0xf0, 0x01, 0x80, 0x66, 0x0f, 0xfe, 0x61, 0x9e, 0x06, 0xc1, 0xb0, 0xc6, 0x60, 0x7f, 0xc0, 0x1f, 
  0xf0, 0x00, 0xc0, 0xc6, 0x0f, 0x00, 0x61, 0x80, 0x06, 0xc1, 0xb0, 0xc6, 0x60, 0x60, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0xc6, 0x0b, 0x00, 0x61, 0x80, 0x06, 0x41, 0x30, 0xc6, 0x20, 0x60, 0x00, 0x1f, 
  0xf0, 0x00, 0x61, 0x87, 0x19, 0x80, 0x61, 0x80, 0x8c, 0x63, 0x19, 0xc6, 0x30, 0x30, 0x00, 0x1f, 
  0xf0, 0x00, 0x1e, 0x06, 0xe0, 0x7c, 0x61, 0x80, 0x78, 0x1c, 0x0e, 0xc6, 0x0f, 0x0f, 0x80, 0x1f, 
  0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x3c, 0x60, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x64, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0xc0, 0x61, 0xc0, 0xec, 0x38, 0x03, 0x03, 0x70, 0x3b, 0x33, 0x70, 0x1c, 0x00, 0x1f, 
  0xf0, 0x00, 0x70, 0x66, 0x33, 0x1c, 0xc6, 0x03, 0x03, 0x98, 0xc7, 0x33, 0x98, 0x63, 0x00, 0x1f, 
  0xf0, 0x00, 0x38, 0x64, 0x12, 0x0c, 0x82, 0x03, 0xfb, 0x0c, 0x83, 0x33, 0x0c, 0x41, 0x00, 0x1f, 
  0xf0, 0x00, 0x0c, 0x6c, 0x1e, 0x0d, 0x83, 0x03, 0x03, 0x0d, 0x83, 0x33, 0x0c, 0xc1, 0x80, 0x1f, 
  0xf0, 0x00, 0x06, 0x6f, 0xfe, 0x0d, 0xff, 0x03, 0x03, 0x0d, 0x83, 0x33, 0x0c, 0xff, 0x80, 0x1f, 
  0xf0, 0x00, 0x06, 0x6c, 0x06, 0x0d, 0x80, 0x03, 0x03, 0x0d, 0x83, 0x33, 0x0c, 0xc0, 0x00, 0x1f, 
  0xf0, 0x00, 0x06, 0x6c, 0x06, 0x0d, 0x80, 0x03, 0x03, 0x0d, 0x83, 0x33, 0x0c, 0xc0, 0x00, 0x1f, 
  0xf0, 0x00, 0x8c, 0x66, 0x03, 0x1c, 0xc0, 0x03, 0x03, 0x0c, 0xc7, 0x33, 0x0c, 0x60, 0x00, 0x1f, 
  0xf0, 0x00, 0x78, 0x61, 0xf1, 0xec, 0x3e, 0x03, 0xfb, 0x0c, 0x7b, 0x33, 0x0c, 0x1f, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


void testscrolltext1(void) {

  Display1.setRotation(2);
  Display1.setTextWrap(false);
  Display1.setTextSize(1); // Draw 2X-scale text
  Display1.setTextColor(WHITE);

  Display1.drawBitmap(
    (Display1.width()  - 128 ) / 2,
    (Display1.height() - 64) / 2,
    myBitmap, 128, 64, 1);
  Display1.display();

}

void testscrolltext2(void) {

  Display2.setRotation(2);
  Display2.setTextWrap(true);
  Display2.setTextSize(2); // Draw 2X-scale text
  Display2.setTextColor(WHITE);
  Display2.setCursor(15, 0);
  Display2.println("Press OK   to lock");
  Display2.display();      // Show initial text

  Display2.startscrollright(0x00, 0x0F);
}

void buttonCheck(void){
  int buttonValue = digitalRead(buttonPin);
  
    if (buttonValue == LOW) {
    // If button pushed, turn LED on
    digitalWrite(ledPin, LOW);
  } else {
    // Otherwise, turn the LED off
    digitalWrite(ledPin, HIGH);
  }
}

void setup() {
  Serial.begin(9600);

  pinMode(buttonPin, INPUT_PULLUP);
  // DefineledPinpin #13 as output, for the LED
  pinMode(ledPin, OUTPUT);

  digitalWrite(ledPin, HIGH);
  digitalWrite(LED_BUILTIN, HIGH);

  if (!Display1.begin(SSD1306_SWITCHCAPVCC, 0x3D)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
  }

  if (!Display2.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
  }

  
  Display1.clearDisplay();
  Display2.clearDisplay();
  testscrolltext1();
  testscrolltext2();

}

void loop() {
  // Read the value of the input. It can either be 1 or 0

  while(true){
    
    buttonCheck();
    
  }
  
}
